// Each row is a food
// Entries in rows are saliva sharing risks of the three actions associated with each food
var scenarios = [
  [2.2, 5.7, 6.7], 
  [1.6, 4.8, 6.3], 
  [1.0, 5.5, 6.1], 
  [1.1, 5.8, 6.6], 
  [2.1, 5.3, 6.0], 
  [1.8, 5.8, 6.7], 
  [2.3, 5.0, 6.5], 
  [1.2, 4.7, 6.7], 
  [1.8, 6.0, 7.0], 
  [1.9, 5.3, 7.0]
];

// Closeness is an integer 1 to 4, 1 being lowest and 4 being higher
var makeUtility = function(closeness){
  if(closeness == 1){
    return function(risk){return 5.2 - 0.45 * (risk - 1)};
  }else if(closeness == 2){
    return function(risk){return 6 - 0.35 * (risk - 1)};
  }else if(closeness == 3){
    return function(risk){return 6.2 - 0.25 * (risk - 1)};
  }else if(closeness == 4){
    return function(risk){return 6.1 - 0.05 * (risk - 1)};
  }
}

// Rational choice actor model; Returns RC actor actions distribution
var actor = function(risks, closeness, beta){
  let actions = _.range(risks.length)
  let utility = makeUtility(closeness);
  let exp_comforts = map(function(x){return Math.exp(beta * utility(x))}, risks); 
  let sum_exp_comforts = sum(exp_comforts);
  let softmaxes = map(function(x){return x / sum_exp_comforts}, exp_comforts);
  
  return Categorical({ps: softmaxes, vs: actions})
}

// Make a RCSA Receiver Model with given parameters
var makeReceiverModel = function(risks, beta, f){return function(){
  var cs = Categorical({ps: [0.25, 0.25, 0.25, 0.25], vs: [1, 2, 3, 4]})
  var closeness = sample(cs)
  var actions_probs = actor(risks, closeness, beta)
  f(closeness, actions_probs)
}}

// Get an RCSA Receiver Distribution with given parameters
var getReceiverDist = function(risks, observed, beta){
  return Infer({method: "enumerate"}, makeReceiverModel(risks, beta, function(closeness, actions_probs){
    condition(sample(actions_probs) == observed)
    return closeness
  }));
}

// Communicative Actor Model; rBeta is the beta parameter for the rational choice receiver model used
var commActor = function(alpha, beta, rBeta, risks, closeness, unavailable){
  var unavailableRisk = risks[unavailable];
  var available = risks.slice(0, unavailable).concat(risks.slice(unavailable + 1))
  var actions = _.range(available.length)
  
  var comfortUtility = makeUtility(closeness);
  
  var utilities = map(function(action){  
    var receiverDist = getReceiverDist(available, action, rBeta);
    return alpha * receiverDist.score(closeness) + comfortUtility(available[action]);
  }, actions); 
  
  var exp_utilities = map(function(x){return Math.exp(beta * x)}, utilities)
  var denominator = sum(exp_utilities) + Math.exp(beta * comfortUtility(unavailableRisk))
  
  var softMaxes = map(function(x){return x / denominator}, exp_utilities)
  
  return Categorical({ps: softMaxes, vs: actions})
}

// Make a Communicative Receiver Model
var makeCommReceiverModel = function(risks, alpha, beta, rBeta, unavailable, f){return function(){
  var cs = Categorical({ps: [0.25, 0.25, 0.25, 0.25], vs: [1, 2, 3, 4]})
  var closeness = sample(cs)
  var actions_probs = commActor(alpha, beta, rBeta, risks, closeness, unavailable)
  f(closeness, actions_probs)
}}

// Get a Communitive Receiver distribution
var getCommReceiverDist = function(risks, observed, alpha, beta, rBeta, unavailable){
  return Infer({method: "enumerate"}, makeCommReceiverModel(risks, alpha, beta, rBeta, unavailable, function(closeness, actions_probs){
    condition(sample(actions_probs) == observed)
    return closeness
  }));
}

// Null model
var nullModel = function(){
  var cs = Categorical({ps: [0.25, 0.25, 0.25, 0.25], vs: [1, 2, 3, 4]})
  var closeness = sample(cs)
  return closeness
}

// Null model distribution
var getNullDist = function(){return Infer({method: "enumerate"}, nullModel);}

// Get closenesses judgments for RCSA 2 choice
var getClosenessesRCSA2 = function(soFar, nextScenarios, beta){
  if(nextScenarios.length == 0){
    return soFar
  }
  
  let nextScenario = nextScenarios[0]
  let low = nextScenario[0]; let mid = nextScenario[1]; let high = nextScenario[2];
  
  let lmdist = getReceiverDist([low, mid], 0, beta)
  soFar.lm.push([low, expectation(lmdist)])
  
  let mldist = getReceiverDist([low, mid], 1, beta)
  soFar.ml.push([mid, expectation(mldist)])
  
  let lhdist = getReceiverDist([low, high], 0, beta)
  soFar.lh.push([low, expectation(lhdist)])
  
  let hldist = getReceiverDist([low, high], 1, beta)
  soFar.hl.push([high, expectation(hldist)])
  
  let mhdist = getReceiverDist([mid, high], 0, beta)
  soFar.mh.push([mid, expectation(mhdist)])
  
  let hmdist = getReceiverDist([mid, high], 1, beta)
  soFar.hm.push([high, expectation(hmdist)])
  
  return getClosenessesRCSA2(soFar, nextScenarios.slice(1), beta)
}

// Example of generating closenesses
getClosenessesRCSA2({lm: [], ml: [], lh: [], hl: [], mh: [], hm: []}, scenarios, 1.8)

// Get closenesses judgments for RCSA 3 choice
var getClosenessesRCSA3 = function(soFar, nextScenarios, beta){
  if(nextScenarios.length == 0){
    return soFar
  }
  
  let nextScenario = nextScenarios[0]
  let low = nextScenario[0]; let mid = nextScenario[1]; let high = nextScenario[2];
  
  let lmdist = getReceiverDist([low, mid, high], 0, beta)
  soFar.lm.push([low, expectation(lmdist)])
  
  let mldist = getReceiverDist([low, mid, high], 1, beta)
  soFar.ml.push([mid, expectation(mldist)])
  
  let lhdist = getReceiverDist([low, mid, high], 0, beta)
  soFar.lh.push([low, expectation(lhdist)])
  
  let hldist = getReceiverDist([low, mid, high], 2, beta)
  soFar.hl.push([high, expectation(hldist)])
  
  let mhdist = getReceiverDist([low, mid, high], 1, beta)
  soFar.mh.push([mid, expectation(mhdist)])
  
  let hmdist = getReceiverDist([low, mid, high], 2, beta)
  soFar.hm.push([high, expectation(hmdist)])
  
  return getClosenessesRCSA3(soFar, nextScenarios.slice(1), beta)
}

// Get closeness judgments for communicative receiver
var getClosenessesCR = function(soFar, nextScenarios, alpha, beta, rBeta){
  if(nextScenarios.length == 0){
    return soFar
  }
  
  let nextScenario = nextScenarios[0]
  let low = nextScenario[0]; let mid = nextScenario[1]; let high = nextScenario[2];
  
  let lmdist = getCommReceiverDist([low, mid, high], 0, alpha, beta, rBeta, 2)
  soFar.lm.push([low, expectation(lmdist)])
  
  let mldist = getCommReceiverDist([low, mid, high], 1, alpha, beta, rBeta, 2)
  soFar.ml.push([mid, expectation(mldist)])
  
  let lhdist = getCommReceiverDist([low, mid, high], 0, alpha, beta, rBeta, 1)
  soFar.lh.push([low, expectation(lhdist)])
  
  let hldist = getCommReceiverDist([low, mid, high], 1, alpha, beta, rBeta, 1)
  soFar.hl.push([high, expectation(hldist)])
  
  let mhdist = getCommReceiverDist([low, mid, high], 0, alpha, beta, rBeta, 0)
  soFar.mh.push([mid, expectation(mhdist)])
  
  let hmdist = getCommReceiverDist([low, mid, high], 1, alpha, beta, rBeta, 0)
  soFar.hm.push([high, expectation(hmdist)])
  
  return getClosenessesCR(soFar, nextScenarios.slice(1), alpha, beta, rBeta)
}